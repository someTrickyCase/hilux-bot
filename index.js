require("dotenv").config();

const TelegramBot = require("node-telegram-bot-api");
const {
    postNewBitrixLead,
    updateBitrixLeadComment,
    getBitrixLeadStatus,
} = require("./bitrxController");
const { getHash, updateHash } = require("./hashController");

const token = process.env.TOKEN;

const bot = new TelegramBot(token, { polling: true });

const webAppUrl = "https://c455-92-55-35-48.ngrok-free.app";

const startKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: "üó®Ô∏è –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞", callback_data: "product" }],
            [{ text: "üöõ –£—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data: "order" }],
            [{ text: "ü§ì –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data: "consultation" }],
            [{ text: "ü•≥ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data: "testimonial" }],
        ],
    },
};

bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === "/start") {
        await bot.sendMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", startKeyboard);

        await bot.sendMessage(chatId, "–¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!", {
            reply_markup: {
                resize_keyboard: true,
                one_time_keyboard: false,
                keyboard: [[{ text: "–í –º–∞–≥–∞–∑–∏–Ω üöó", web_app: { url: webAppUrl } }]],
            },
        });
    }

    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            await bot.sendMessage(
                chatId,
                ` –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ù–∞—à–∏ –º–µ–Ω–µ–Ω–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - ${data.bitrixID}`
            );
            const username = msg.from.username;
            updateHash(username, data.bitrixID);
            await bot.sendMessage(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", startKeyboard);
        } catch (error) {
            console.error(error);
        }
    }
});

bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data === "order") {
        try {
            await bot.sendMessage(chatId, "–û–∫–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞");
            bot.on("message", async (msg) => {
                // TODO find order status in WC base and send answer to customer
                const apiRes = await getBitrixLeadStatus(+msg.text);
                await bot.sendMessage(chatId, apiRes);
                setTimeout(() => {
                    bot.sendMessage(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", startKeyboard);
                }, 700);
                bot.removeListener("message");
            });
        } catch (error) {
            console.error(error);
        }
        return;
    }

    if (data === "product") {
        try {
            await bot.sendMessage(chatId, "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç");
            bot.on("message", async (msg) => {
                // TODO create a new bitrix lead with COMMENT and chat.username like contact type and chat.name like name
                const postData = {
                    fields: {
                        COMMENTS: `–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ: ${msg.text}`,
                        SOURCE_DESCRIPTION: "hilux-tg-bot",
                        TITLE: `${msg.chat.first_name}  –í–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ`,
                        NAME: msg.chat.first_name,
                        IM: [
                            {
                                TYPE_ID: "telegram",
                                VALUE: `Telegram username: @${msg.chat.username}`,
                            },
                        ],
                    },
                };
                const username = msg.from.username;
                const bitrixID = getHash(username);
                if (bitrixID) {
                    updateBitrixLeadComment(bitrixID, `–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ: ${msg.text}`);
                } else {
                    const res = await postNewBitrixLead(postData);
                    updateHash(username, res.result);
                }
                await bot.sendMessage(chatId, "–í–∞—à –≤–æ–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –≤–µ—Ä–Ω–µ–º—Å—è!");
                await bot.sendMessage(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", startKeyboard);
                bot.removeListener("message");
            });
        } catch (error) {
            console.error(error);
        }
    }

    if (data === "consultation") {
        try {
            await bot.sendMessage(
                chatId,
                "–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"
            );
            bot.on("message", async (msg) => {
                // TODO create a new bitrix lead with COMMENT and chat.username like contact type and chat.name like name
                const postData = {
                    fields: {
                        COMMENTS: `–ó–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: ${msg.text}`,
                        SOURCE_DESCRIPTION: "hilux-tg-bot",
                        TITLE: `${msg.chat.first_name}  –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è`,
                        NAME: msg.chat.first_name,
                        IM: [
                            {
                                TYPE_ID: "telegram",
                                VALUE: `Telegram username: @${msg.chat.username}`,
                            },
                        ],
                    },
                };
                const username = msg.from.username;
                const bitrixID = getHash(username);
                if (bitrixID) {
                    updateBitrixLeadComment(bitrixID, `–ó–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: ${msg.text}`);
                } else {
                    const res = await postNewBitrixLead(postData);
                    updateHash(username, res.result);
                }
                await bot.sendMessage(chatId, "–í–∞—à –≤–æ–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –≤–µ—Ä–Ω–µ–º—Å—è!");
                await bot.sendMessage(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", startKeyboard);
                bot.removeListener("message");
            });
        } catch (error) {
            console.error(error);
        }
    }

    if (data === "testimonial") {
        try {
            await bot.sendMessage(
                chatId,
                "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ù–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —É–¥–æ–±–Ω–æ? –ï—Å–ª–∏ –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å  –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º."
            );
            bot.on("message", async (msg) => {
                // TODO create a new bitrix lead with COMMENT and chat.username like contact type and chat.name like name
                const postData = {
                    fields: {
                        COMMENTS: `–û—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: ${msg.text}`,
                        SOURCE_DESCRIPTION: "hilux-tg-bot",
                        TITLE: `${msg.chat.first_name}  –û—Ç–∑—ã–≤`,
                        NAME: msg.chat.first_name,
                        IM: [
                            {
                                TYPE_ID: "telegram",
                                VALUE: `Telegram username: @${msg.chat.username}`,
                            },
                        ],
                    },
                };
                const username = msg.from.username;
                const bitrixID = getHash(username);
                if (bitrixID) {
                    updateBitrixLeadComment(bitrixID, `–û—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: ${msg.text}`);
                } else {
                    const res = await postNewBitrixLead(postData);
                    updateHash(username, res.result);
                }
                await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤!");
                await bot.sendMessage(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", startKeyboard);
                bot.removeListener("message");
            });
        } catch (error) {
            console.error(error);
        }
    }
});
